from flask import Flask, request, jsonify
from flask_restful import Api, Resource, reqparse
from datetime import datetime

app = Flask(__name__)
api = Api(app)

# Sample in-memory data for books and authors
books = []
authors = []

# Book Class
class Book(Resource):
    def post(self):
        # Parse input data to create a new book
        parser = reqparse.RequestParser()
        parser.add_argument('title', required=True, help="Title cannot be blank")
        parser.add_argument('author_id', type=int, required=True, help="Author ID cannot be blank")
        parser.add_argument('price', type=float, required=True, help="Price cannot be blank")
        parser.add_argument('published_date', required=True, help="Published Date cannot be blank")
        parser.add_argument('description')
        args = parser.parse_args()

        # Create a new book entry
        book = {
            'id': len(books) + 1,
            'title': args['title'],
            'author_id': args['author_id'],
            'price': args['price'],
            'published_date': args['published_date'],
            'description': args['description'] or 'No description',
            'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        books.append(book)
        return jsonify({'message': 'Book added successfully!', 'book': book})

    def get(self, book_id):
        # Get book by ID
        book = next((book for book in books if book['id'] == book_id), None)
        if not book:
            return {'message': 'Book not found'}, 404
        return jsonify(book)

    def put(self, book_id):
        # Update book details by ID
        book = next((book for book in books if book['id'] == book_id), None)
        if not book:
            return {'message': 'Book not found'}, 404

        # Parse input data for updating
        parser = reqparse.RequestParser()
        parser.add_argument('title')
        parser.add_argument('author_id', type=int)
        parser.add_argument('price', type=float)
        parser.add_argument('published_date')
        parser.add_argument('description')
        args = parser.parse_args()

        if args['title']:
            book['title'] = args['title']
        if args['author_id']:
            book['author_id'] = args['author_id']
        if args['price']:
            book['price'] = args['price']
        if args['published_date']:
            book['published_date'] = args['published_date']
        if args['description']:
            book['description'] = args['description']

        return jsonify({'message': 'Book updated successfully!', 'book': book})

    def delete(self, book_id):
        # Delete book by ID
        book = next((book for book in books if book['id'] == book_id), None)
        if not book:
            return {'message': 'Book not found'}, 404
        books.remove(book)
        return {'message': 'Book deleted successfully!'}

# Author Class
class Author(Resource):
    def post(self):
        # Parse input data to create a new author
        parser = reqparse.RequestParser()
        parser.add_argument('name', required=True, help="Name cannot be blank")
        parser.add_argument('bio')
        args = parser.parse_args()

        # Create a new author entry
        author = {
            'id': len(authors) + 1,
            'name': args['name'],
            'bio': args['bio'] or 'No bio available',
            'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        authors.append(author)
        return jsonify({'message': 'Author added successfully!', 'author': author})

    def get(self, author_id):
        # Get author by ID
        author = next((author for author in authors if author['id'] == author_id), None)
        if not author:
            return {'message': 'Author not found'}, 404
        return jsonify(author)

# Book List Class
class BookList(Resource):
    def get(self):
        # Get list of all books
        return jsonify(books)

# API Endpoints
api.add_resource(Book, '/api/books/<int:book_id>', '/api/books')
api.add_resource(Author, '/api/authors/<int:author_id>', '/api/authors')
api.add_resource(BookList, '/api/books')

if __name__ == '__main__':
    app.run(debug=True)
